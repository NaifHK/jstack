// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PRO
}

model User {
  id         String   @id @default(cuid())
  externalId String?  @unique // get the external id from the auth provider like clerk
  quotaLimit Int
  plan       Plan     @default(FREE)
  email      String   @unique
  apiKey     String   @unique @default(cuid())
  discordId  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  EventCategories EventCategory[] // here the relationships are defined as 1 to many one user can have many event categories
  events          Event[] // here the relationships are defined as 1 to many one user can have many events
  Qouta           Qouta[]

  @@index([email, apiKey]) // get the user by email or api key faster than the default id
}

model EventCategory {
  id    String  @id @default(cuid())
  name  String
  color Int
  emoji String?

  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // a user can have only one category with the same name like user with id 1 and have only one category with name "work"
  //can have only one category with the same name like user with id
  Event     Event[]

  @@unique([userId, name])
}

enum DeilveryStatus {
  PENDING
  FAILED
  DELIVERED
}

model Event {
  id               String @id @default(cuid())
  formattedMessage String

  User   User   @relation(fields: [userId], references: [id])
  userId String

  name           String
  fields         Json
  deliveryStatus DeilveryStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EventCategory   EventCategory? @relation(fields: [eventCategoryId], references: [id])
  eventCategoryId String?

  @@index([createdAt])
}

model Qouta {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  year      Int
  month     Int
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
